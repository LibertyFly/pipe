#Detail don't need percent.

function total()
{
    local _time=$1
    local _id=$2
    local _key_cnt=0
    local shellCmd="$grepFile"
    if [ "$muti" -eq 1 ];then
        if [ "${detail}" -eq 1 ];then
           shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v1.awk|sed 's/_/ /g'"   
           _key_cnt=2
        else  
         create_muti_file   "$shellCmd"
	 shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_total.awk"
        fi
    fi
     echo $shellCmd|sh|\
     awk  -v time=$_time -v id=$_id \
         -v key_cnt=${_key_cnt} \
         '{ \
                if(key_cnt==2){_time=$1;_id=$2;}else{_time=time;_id=id;}\
                _up_bytes=$(key_cnt+1);\
                _down_bytes=$(key_cnt+2);\
                _total_bytes=$(key_cnt+3);\
                _msg_count=$(key_cnt+4);\
		_online_time=$(key_cnt+5);\
                _user_count=$(key_cnt+6);\
                printf _time","_id",";\
                printf("%d,%d,%d,%d,%d,%d\n",\
                _up_bytes,_down_bytes,_total_bytes,_msg_count,_online_time,_user_count);\
          }' \
     >> $RESULT_FOLD/$FILE_NAME
}

function service_group_total()
{
    local _time=$1
    local _id=$2
    local shellCmd="$grepFile"
    local _key_cnt=0
    if [ "$muti" -eq 1 ];then
	if [ "${detail}" -eq 1 ];then
           shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v2.awk|sed 's/_/ /g'" 	
	   _key_cnt=2
	else
	    create_muti_file   "$shellCmd"
            shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v1.awk|sort -nr -k4"		
	fi
    fi
    set_total
    echo $shellCmd|sh|\
    awk  -v time=$_time -v id=$_id \
	 -v zd_service_group=$SERVICE_GROUP_ZIDIAN \
	 -v t_up=$total_up -v t_down=$total_down -v t_total=$total_total -v t_msg_count=$total_msg_count  \
	 -v key_cnt=${_key_cnt} \
	'BEGIN{while((getline<zd_service_group)>0){service_group[$1]=$2}}\
	 { \
		if(key_cnt==2){_time=$1;_id=$2;}else{_time=time;_id=id;}\
                _service_group_id=$(key_cnt+1);\
                _service_group=((service_group[$(key_cnt+1)]=="")?$(key_cnt+1):service_group[$(key_cnt+1)]);\
                _up_bytes=$(key_cnt+2);\
                _up_bytes_rate=(t_up==0?0:_up_bytes*100/t_up);\
                _down_bytes=$(key_cnt+3);\
                _down_bytes_rate=(t_down==0?0:_down_bytes*100/t_down);\
                _total_bytes=$(key_cnt+4);\
                _total_bytes_rate=(t_total==0?0:_total_bytes*100/t_total);\
                _msg_count=$(key_cnt+5);\
                _msg_count_rate=(t_msg_count==0?0:_msg_count*100/t_msg_count);\
                _user_count=$(key_cnt+7);\
                printf _time","_id",";\
                printf("%s,%s,%d,%d,%d,%.3f,%.3f,%.3f,%d,%.3f,%d\n",_service_group_id,_service_group,\
                _up_bytes,_down_bytes,_total_bytes,_up_bytes_rate,_down_bytes_rate,_total_bytes_rate,\
                _msg_count,_msg_count_rate,_user_count);\
          }' \
     >> $RESULT_FOLD/$FILE_NAME
}

function service_type_total()
{

    local _time=$1
    local _id=$2
    local _key_cnt=0
    local shellCmd="$grepFile"
    if [ "$muti" -eq 1 ];then
	if [ "${detail}" -eq 1 ];then
           shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v3.awk|sed 's/_/ /g'"   
           _key_cnt=2
        else
           create_muti_file   "$shellCmd"
           shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v2.awk|sort -nr -k5"
	fi
    fi

    case  $apercent  in
      "total") set_total ;;
      "service_group")  set_service_group  ;;
      *)  set_total ;;
    esac 
    echo $shellCmd|sh|\
    awk  -v time=$_time -v id=$_id \
         -v zd_service_type=$SERVICE_TYPE_ZIDIAN \
         -v t_up=$total_up -v t_down=$total_down -v t_total=$total_total -v t_msg_count=$total_msg_count  \
         -v key_cnt=${_key_cnt} \
        'BEGIN{while((getline<zd_service_type)>0){service_type[$2]=$3}}\
         { \
               if(key_cnt==2){_time=$1;_id=$2;}else{_time=time;_id=id;}\
                _service_group_id=$(key_cnt+1);\
		_service_type_id=$(key_cnt+2);\
                _service_type=((service_type[$(key_cnt+2)]=="")?$(key_cnt+2):service_type[$(key_cnt+2)]);\
                _up_bytes=$(key_cnt+3);\
                _up_bytes_rate=(t_up==0?0:_up_bytes*100/t_up);\
                _down_bytes=$(key_cnt+4);\
                _down_bytes_rate=(t_down==0?0:_down_bytes*100/t_down);\
                _total_bytes=$(key_cnt+5);\
                _total_bytes_rate=(t_total==0?0:_total_bytes*100/t_total);\
                _msg_count=$(key_cnt+6);\
                _msg_count_rate=(t_msg_count==0?0:_msg_count*100/t_msg_count);\
		_online_time=$(key_cnt+7);\
                _user_count=$(key_cnt+8);\
                printf _time","_id",";\
                printf("%s,%s,%s,%d,%d,%d,%.3f,%.3f,%.3f,%d,%.3f,%d,%d\n",_service_group_id,_service_type_id,_service_type,\
                _up_bytes,_down_bytes,_total_bytes,_up_bytes_rate,_down_bytes_rate,_total_bytes_rate,\
                _msg_count,_msg_count_rate,_online_time,_user_count);\
          }' \
          >>$RESULT_FOLD/$FILE_NAME
}


function service_detail_total()
{
    local _time=$1
    local _id=$2
    local _key_cnt=0
    set_service_type
    local shellCmd="$grepFile"
    if [ "$muti" -eq 1 ];then
        if [ "${detail}" -eq 1 ];then
           shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v3.awk|sed 's/_/ /g'"   
           _key_cnt=2
        else
          create_muti_file   "$shellCmd"
          shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v2.awk|sort -nr -k5"
	fi
    fi
    echo $shellCmd|sh|\
    awk  -v time=$_time -v id=$_id \
         -v zd_service_detail=$SERVICE_DETAIL_ZIDIAN \
         -v t_up=$total_up -v t_down=$total_down -v t_total=$total_total -v t_msg_count=$total_msg_count  \
         -v key_cnt=${_key_cnt} \
        'BEGIN{while((getline<zd_service_detail)>0){service_detail[$2]=$3}}\
         { \
		if(key_cnt==2){_time=$1;_id=$2;}else{_time=time;_id=id;}\
                _service_type_id=$(key_cnt+1);\
                _service_detail_id=$(key_cnt+2);\
                _service_detail=((service_detail[$(key_cnt+2)]=="")?$(key_cnt+2):service_detail[$(key_cnt+2)]);\
                _up_bytes=$(key_cnt+3);\
                _up_bytes_rate=((t_up==0)?0:(_up_bytes*100/t_up));\
                _down_bytes=$(key_cnt+4);\
                _down_bytes_rate=((t_down==0)?0:(_down_bytes*100/t_down));\
                _total_bytes=$(key_cnt+5);\
                _total_bytes_rate=((t_total==0)?0:(_total_bytes*100/t_total));\
                _msg_count=$(key_cnt+6);\
                _msg_count_rate=((t_msg_count==0)?0:(_msg_count*100/t_msg_count));\
                _online_time=$(key_cnt+7);\
                _user_count=$(key_cnt+8);\
                printf _time","_id",";\
                printf("%s,%s,%s,%d,%d,%d,%.3f,%.3f,%.3f,%d,%.3f,%d,%d\n",_service_type_id,_service_detail_id,_service_detail,\
                _up_bytes,_down_bytes,_total_bytes,_up_bytes_rate,_down_bytes_rate,_total_bytes_rate,\
                _msg_count,_msg_count_rate,_online_time,_user_count);\
          }' \
          >>$RESULT_FOLD/$FILE_NAME
}


function weixin_section()
{
    local _time=$1
    local _id=$2
    local shellCmd="$grepFile"
    if [ "$muti" -eq 1 ];then
         create_muti_file   "$shellCmd"
         shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_weixin_section.awk"
    fi
    echo $shellCmd|sh|\
    awk  -v time=$_time -v id=$_id \
         -v zd_service_detail=<(grep -E "S08E0"  $SERVICE_DETAIL_ZIDIAN) \
         -v key_cnt=0 \
        'BEGIN{while((getline<zd_service_detail)>0){service_detail[$2]=$3}}\
         { \
                _service_detail_id=$(key_cnt+1);\
                _service_detail=((service_detail[$(key_cnt+1)]=="")?$(key_cnt+1):service_detail[$(key_cnt+1)]);\
		_section1=$2;\
		_section2=$3;\
		_section3=$4;\
		_section4=$5;\
		_section5=$6;\
		printf time","id",";\
                printf("%s,%s,%d,%d,%d,%d,%d\n",_service_detail_id,_service_detail,\
			_section1,_section2,_section3,_section4,_section5);\
          }' \
          >>$RESULT_FOLD/$FILE_NAME
}

function cgi_total()
{
    local _time=$1
    local _id=$2
    set_total
    local shellCmd="$grepFile"
    if [ "$muti" -eq 1 ];then
         create_muti_file   "$shellCmd"
         shellCmd="cat $muti_tmp_file|awk -f $AWK_FOLD/muti_users_v1.awk |sort -nr -k4"
    fi
    echo $shellCmd|sh|\
    awk  -v time=$_time -v id=$_id \
         -v zd_cgi=$CGI_ZIDIAN \
        -v t_up=$total_up -v t_down=$total_down -v t_total=$total_total -v t_msg_count=$total_msg_count  \
        -v key_cnt=0 \
        'BEGIN{while((getline<zd_cgi)>0){cgi[$1]=$2}}\
         { \
                _cgi_id=$(key_cnt+1);\
                _cgi=((cgi[$(key_cnt+1)]=="")?$(key_cnt+1):cgi[$(key_cnt+1)]);\
                _up_bytes=$(key_cnt+2);\
                _up_bytes_rate=(t_up==0?0:_up_bytes*100/t_up);\
                _down_bytes=$(key_cnt+3);\
                _down_bytes_rate=(t_down==0?0:_down_bytes*100/t_down);\
                _total_bytes=$(key_cnt+4);\
                _total_bytes_rate=(t_total==0?0:_total_bytes*100/t_total);\
                _msg_count=$(key_cnt+5);\
                _msg_count_rate=(t_msg_count==0?0:_msg_count*100/t_msg_count);\
                _user_count=$(key_cnt+7);\
                printf time","id",";\
                printf("%s,%s,%d,%d,%d,%.3f,%.3f,%.3f,%d,%.3f,%d\n",_cgi_id,_cgi,\
                _up_bytes,_down_bytes,_total_bytes,_up_bytes_rate,_down_bytes_rate,_total_bytes_rate,\
                _msg_count,_msg_count_rate,_user_count);\
          }' \
     >> $RESULT_FOLD/$FILE_NAME
}

function ggsn_sgsn_user_total()
{
  local _time=$1
  local _id=$2  
  local _key_cnt=0
  set_total
  local shellCmd="$grepFile"
   if [ "$muti" -eq 1 ];then
        if [ "${detail}" -eq 1 ];then
           shellCmd="cat $muti_tmp_file|awk   -f ${AWK_FOLD}/muti_users_v2.awk|sed 's/_/ /g'"
           _key_cnt=2
        else
         create_muti_file   "$shellCmd"
         shellCmd="cat $muti_tmp_file|awk -f $AWK_FOLD/muti_users_v1.awk |sort -nr -k4"
        fi
   fi
    echo $shellCmd|sh|\
    awk  -v time=$_time -v id=$_id \
         -v zd_net_element=$NET_ELEMENT_ZIDIAN \
        -v t_up=$total_up -v t_down=$total_down -v t_total=$total_total -v t_msg_count=$total_msg_count  \
        -v key_cnt=${_key_cnt} \
        'BEGIN{while((getline<zd_net_element)>0){net_element[$1]=$2}}\
         { \
	       if(key_cnt==2){_time=$1;_id=$2;}else{_time=time;_id=id;}\
                _net_element_id=$(key_cnt+1);\
                _net_element=((net_element[$(key_cnt+1)]=="")?$(key_cnt+1):net_element[$(key_cnt+1)]);\
                _up_bytes=$(key_cnt+2);\
                _up_bytes_rate=(t_up==0?0:_up_bytes*100/t_up);\
                _down_bytes=$(key_cnt+3);\
                _down_bytes_rate=(t_down==0?0:_down_bytes*100/t_down);\
                _total_bytes=$(key_cnt+4);\
                _total_bytes_rate=(t_msg_count==0?0:_total_bytes*100/t_msg_count);\
                _msg_count=$(key_cnt+5);\
		_online_time=$(key_cnt+6);\
                _user_count=$(key_cnt+7);\
                printf _time","_id",";\
                printf("%s,%d,%d,%d,%.3f,%.3f,%.3f,%d,%d,%d\n",_net_element,\
                _up_bytes,_down_bytes,_total_bytes,_up_bytes_rate,_down_bytes_rate,_total_bytes_rate,\
                _msg_count,_online_time,_user_count);\
          }' \
     >> $RESULT_FOLD/$FILE_NAME
}

function disk_size_total()
{
  local _time=$1
  local _id=$2
  echo $grepFile|sh|awk -v time=$_time -v id=$_id   '{printf time","id"," ;for(i=1;i<NF;i++){printf $i"," } print $NF;}' \
       >>$RESULT_FOLD/$FILE_NAME
}
